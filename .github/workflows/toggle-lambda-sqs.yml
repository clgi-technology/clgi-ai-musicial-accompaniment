name: Toggle Lambda SQS Trigger

on:
  workflow_dispatch:
    inputs:
      function_name:
        description: "Lambda function name (e.g. verify-model-lambda)"
        required: true
      queue_name:
        description: "Optional: part of SQS queue name to match"
        required: false
      action:
        description: "Choose whether to pause or resume the trigger"
        required: true
        type: choice
        options:
          - pause
          - resume

jobs:
  toggle-trigger:
    runs-on: ubuntu-latest

    permissions:
      id-token: write   # for OIDC auth if using AWS roles
      contents: read

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: us-east-1
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }} # optional if using OIDC
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      - name: Install jq
        run: sudo apt-get update && sudo apt-get install -y jq

      - name: Toggle Lambda SQS Trigger
        env:
          FUNCTION_NAME: ${{ github.event.inputs.function_name }}
          QUEUE_NAME: ${{ github.event.inputs.queue_name }}
          ACTION: ${{ github.event.inputs.action }}
        run: |
          echo "üîç Fetching event source mappings for $FUNCTION_NAME..."
          MAPPINGS=$(aws lambda list-event-source-mappings \
            --function-name "$FUNCTION_NAME" \
            --query 'EventSourceMappings[*].{UUID:UUID,ARN:EventSourceArn}' \
            --output json)

          UUIDS=$(echo "$MAPPINGS" | jq -r ".[] | select(.ARN | test(\"$QUEUE_NAME\")) | .UUID")

          if [ -z "$UUIDS" ]; then
            echo "‚ùå No matching event source mappings found for $FUNCTION_NAME (Queue filter: $QUEUE_NAME)"
            exit 1
          fi

          for UUID in $UUIDS; do
            if [ "$ACTION" = "pause" ]; then
              echo "‚è∏Ô∏è  Disabling mapping $UUID..."
              aws lambda update-event-source-mapping --uuid "$UUID" --enabled false > /dev/null
            elif [ "$ACTION" = "resume" ]; then
              echo "‚ñ∂Ô∏è  Enabling mapping $UUID..."
              aws lambda update-event-source-mapping --uuid "$UUID" --enabled true > /dev/null
            else
              echo "‚ùå Invalid action: $ACTION"
              exit 1
            fi
          done

          echo "‚úÖ Done. All matching mappings updated."
