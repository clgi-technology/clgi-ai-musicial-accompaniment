AWSTemplateFormatVersion: "2010-09-09"
Description: >
  AI Pipeline Stack: S3 -> SQS -> Lambda -> AWS Batch (with optional G5 support)
  Produces S3 bucket, SQS queue, Lambda to submit Batch jobs, ECR repos,
  Batch compute environment/job queue/job definition and IAM roles including
  a GitHub OIDC role for GitHub Actions (no static AWS secrets required).

Parameters:
  GitHubOrg:
    Type: String
    Default: "your-org"
    Description: "GitHub organization (for OIDC trust condition)."
  GitHubRepo:
    Type: String
    Default: "your-repo"
    Description: "GitHub repository (for OIDC trust condition). Use format: your-org/your-repo"
  BucketName:
    Type: String
    Default: ""
    Description: "Optional: specify S3 bucket name. Leave blank for autogenerated."
  LambdaTriggerEnabled:
    Type: String
    AllowedValues: ["true","false"]
    Default: "true"
    Description: "Enable S3 -> SQS notification wiring (true/false). Use false to pause pipeline triggers."
  BatchInstanceTypes:
    Type: CommaDelimitedList
    Default: "g5.xlarge,c5.xlarge"
    Description: "Allowed instance types for Batch CE. Put GPU type such as g5.xlarge first if needed."
  UseGpu:
    Type: String
    AllowedValues: ["true","false"]
    Default: "false"
    Description: "Set true to indicate you will request G5 quotas and want GPU capable CE."

Conditions:
  TriggerEnabled: !Equals [ !Ref LambdaTriggerEnabled, "true" ]
  WantsGPU: !Equals [ !Ref UseGpu, "true" ]

Resources:

  ## S3 Bucket
  DataBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !If
        - !Equals [ !Ref BucketName, "" ]
        - !Sub "${AWS::StackName}-data-${AWS::AccountId}"
        - !Ref BucketName
      LifecycleConfiguration:
        Rules:
          - Id: "ProcessedCleanup"
            Status: "Enabled"
            ExpirationInDays: 30
            Prefix: "processed/"
    DeletionPolicy: Retain

  ## SQS Queue
  PipelineQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: !Sub "${AWS::StackName}-queue"

  ## SQS Policy to allow S3 to send messages
  PipelineQueuePolicy:
    Type: AWS::SQS::QueuePolicy
    Properties:
      Queues:
        - !Ref PipelineQueue
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Sid: AllowS3SendMessage
            Effect: Allow
            Principal: "*"
            Action: "sqs:SendMessage"
            Resource: !GetAtt PipelineQueue.Arn
            Condition:
              ArnLike:
                aws:SourceArn: !GetAtt DataBucket.Arn
            Principal:
              Service: s3.amazonaws.com

  ## IAM Role: Lambda execution
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "${AWS::StackName}-LambdaRole"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: LambdaPipelinePolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - batch:SubmitJob
                  - batch:DescribeJobs
                Resource: "*"
              - Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:PutObject
                  - s3:ListBucket
                Resource:
                  - !GetAtt DataBucket.Arn
                  - !Sub "${DataBucket.Arn}/*"
              - Effect: Allow
                Action:
                  - sqs:ReceiveMessage
                  - sqs:DeleteMessage
                  - sqs:GetQueueAttributes
                Resource: !GetAtt PipelineQueue.Arn

  ## Lambda Function that consumes SQS events and submits Batch jobs
  PipelineDispatcherFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub "${AWS::StackName}-dispatcher"
      Runtime: python3.11
      Handler: index.lambda_handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Timeout: 300
      Environment:
        Variables:
          BATCH_QUEUE: !Sub "${AWS::StackName}-job-queue"
          BATCH_JOB_DEF: !Sub "${AWS::StackName}-job-def:1"
          S3_BUCKET: !Ref DataBucket
      Code:
        ZipFile: |
          import os, json, boto3
          batch = boto3.client('batch')
          def lambda_handler(event, context):
              # event is SQS form because this Lambda will be connected via event source mapping
              records = event.get('Records', [])
              submitted = []
              for rec in records:
                  body = rec.get('body')
                  try:
                      msg = json.loads(body)
                  except Exception:
                      msg = {"raw": body}
                  # Example expects S3 event JSON in 'msg' or raw S3 notification structure
                  # attempt to parse s3 key if present:
                  s3_key = None
                  try:
                      s3_records = msg.get('Records', [])
                      if s3_records:
                          s3_key = s3_records[0]['s3']['object']['key']
                  except Exception:
                      s3_key = None
                  if not s3_key:
                      # fallback: include raw body as identifier
                      s3_key = str(msg)[:120]
                  response = batch.submit_job(
                      jobName=f"process-{s3_key[:64]}",
                      jobQueue=os.environ['BATCH_QUEUE'],
                      jobDefinition=os.environ['BATCH_JOB_DEF'],
                      containerOverrides={
                          'environment': [
                              {'name': 'S3_KEY', 'value': s3_key},
                              {'name': 'S3_BUCKET', 'value': os.environ['S3_BUCKET']}
                          ]
                      }
                  )
                  submitted.append(response.get('jobId'))
              return {"submitted": submitted}

  ## Lambda EventSourceMapping to read from SQS (enabled always; you can disable by removing permission or changing concurrency)
  LambdaSQSTrigger:
    Type: AWS::Lambda::EventSourceMapping
    Properties:
      EventSourceArn: !GetAtt PipelineQueue.Arn
      FunctionName: !GetAtt PipelineDispatcherFunction.Arn
      BatchSize: 1
      Enabled: true

  ## ECR repositories for containers
  LabelerRepo:
    Type: AWS::ECR::Repository
    Properties:
      RepositoryName: !Sub "${AWS::StackName}-labeler"

  TrainerRepo:
    Type: AWS::ECR::Repository
    Properties:
      RepositoryName: !Sub "${AWS::StackName}-trainer"

  VerifyRepo:
    Type: AWS::ECR::Repository
    Properties:
      RepositoryName: !Sub "${AWS::StackName}-verify"

  ## IAM Role: AWS Batch service
  BatchServiceRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "${AWS::StackName}-BatchServiceRole"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - batch.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSBatchServiceRole

  ## IAM Role & Instance Profile for Batch EC2 instances
  BatchInstanceRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "${AWS::StackName}-BatchInstanceRole"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonEC2ContainerServiceforEC2Role
        - arn:aws:iam::aws:policy/CloudWatchLogsFullAccess

  BatchInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Roles:
        - !Ref BatchInstanceRole
      InstanceProfileName: !Sub "${AWS::StackName}-InstanceProfile"

  ## AWS Batch Compute Environment
  BatchComputeEnvironment:
    Type: AWS::Batch::ComputeEnvironment
    Properties:
      ComputeEnvironmentName: !Sub "${AWS::StackName}-compute-env"
      Type: MANAGED
      ServiceRole: !GetAtt BatchServiceRole.Arn
      ComputeResources:
        Type: EC2
        MinvCpus: 0
        MaxvCpus: 256
        DesiredvCpus: 0
        InstanceTypes: !Ref BatchInstanceTypes
        InstanceRole: !GetAtt BatchInstanceProfile.Arn
        Subnets:
          - subnet-xxxxxxxx # <-- REPLACE with your subnet(s)
        SecurityGroupIds:
          - sg-xxxxxxxx    # <-- REPLACE with your security group(s)
        Tags:
          Name: !Sub "${AWS::StackName}-batch-instance"
      State: ENABLED

  ## AWS Batch Job Queue
  BatchJobQueue:
    Type: AWS::Batch::JobQueue
    Properties:
      JobQueueName: !Sub "${AWS::StackName}-job-queue"
      Priority: 1
      ComputeEnvironmentOrder:
        - Order: 1
          ComputeEnvironment: !Ref BatchComputeEnvironment
      State: ENABLED

  ## Placeholder Job Definition (must be updated with actual ECR images)
  BatchJobDefinition:
    Type: AWS::Batch::JobDefinition
    Properties:
      JobDefinitionName: !Sub "${AWS::StackName}-job-def"
      Type: container
      ContainerProperties:
        Image: !Sub "${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/${LabelerRepo}"
        Vcpus: 2
        Memory: 4096
        JobRoleArn: !GetAtt LambdaExecutionRole.Arn
        Environment:
          - Name: "EXAMPLE"
            Value: "value"
      RetryStrategy:
        Attempts: 1

  ## IAM OIDC Provider (for GitHub Actions)
  GitHubOIDCProvider:
    Type: AWS::IAM::OIDCProvider
    Properties:
      Url: "https://token.actions.githubusercontent.com"
      ClientIdList:
        - "sts.amazonaws.com"
      ThumbprintList:
        # Known GitHub Actions thumbprint (common CA): 6938fd4d98... (Microsoft)
        - "6938fd4d98bab03faadb97b34396831e3780aea1"

  ## IAM Role for GitHub (OIDC) to Assume
  GitHubOIDCRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "${AWS::StackName}-GitHubOIDCRole"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Federated: !GetAtt GitHubOIDCProvider.Arn
            Action:
              - sts:AssumeRoleWithWebIdentity
            Condition:
              StringEquals:
                token.actions.githubusercontent.com:sub: !Sub "repo:${GitHubRepo}:ref:refs/heads/main"
              StringLike:
                token.actions.githubusercontent.com:aud: "sts.amazonaws.com"
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonS3FullAccess
        - arn:aws:iam::aws:policy/AmazonSQSFullAccess
        - arn:aws:iam::aws:policy/AWSBatchFullAccess
        - arn:aws:iam::aws:policy/AWSLambda_FullAccess
        - arn:aws:iam::aws:policy/CloudWatchLogsFullAccess

  ## S3 Notification Configuration -> SQS (conditional)
  S3BucketNotification:
    Type: "AWS::S3::Bucket"
    Condition: TriggerEnabled
    Properties:
      BucketName: !If
        - !Equals [ !Ref BucketName, "" ]
        - !Sub "${AWS::StackName}-data-${AWS::AccountId}"
        - !Ref BucketName
      NotificationConfiguration:
        QueueConfigurations:
          - Event: "s3:ObjectCreated:*"
            Queue: !GetAtt PipelineQueue.Arn
    DeletionPolicy: Retain
    Metadata:
      Note: "This resource exists only when triggers are enabled. If you used DataBucket above, CFN will error if you create a second bucket with same name and TriggerEnabled true/false mismatch."

  ## Note: Because CloudFormation doesn't allow conditional partial properties easily on the same bucket,
  ## we create DataBucket always; S3BucketNotification is a duplicate bucket resource only when triggers enabled.
  ## If you prefer a single resource approach edit template to merge NotificationConfiguration into DataBucket with Fn::If.

Outputs:
  S3BucketName:
    Description: "S3 Bucket for audio and models"
    Value: !Ref DataBucket
  SQSQueueURL:
    Description: "SQS Queue URL"
    Value: !Ref PipelineQueue
  SQSQueueArn:
    Description: "SQS Queue ARN"
    Value: !GetAtt PipelineQueue.Arn
  LambdaName:
    Description: "Lambda dispatcher name"
    Value: !Ref PipelineDispatcherFunction
  BatchComputeEnvironment:
    Description: "Batch compute environment name"
    Value: !Ref BatchComputeEnvironment
  BatchJobQueue:
    Description: "Batch job queue name"
    Value: !Ref BatchJobQueue
  ECRLabelerRepo:
    Description: "ECR repo for labeler"
    Value: !Ref LabelerRepo
  GitHubOIDCRoleArn:
    Description: "Role ARN for GitHub Actions OIDC"
    Value: !GetAtt GitHubOIDCRole.Arn